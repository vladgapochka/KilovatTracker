@page "/analysis"
@using System.Text.Json
@using ClearKilovat.DB
@using ClearKilovat.Models.Analysis
@using ClearKilovat.Models.Entity
@using Radzen
@using Radzen.Blazor
@using Microsoft.EntityFrameworkCore
@using System.Text
@inject IHttpClientFactory HttpClientFactory
@inject DialogService DialogService
@inject PostgreDBContext DbContext
@rendermode InteractiveServer

<RadzenStack Orientation="Orientation.Vertical" Style="width:100%; max-width:900px; margin:0 auto; padding:20px;">
    <RadzenCard Style="width:100%; padding:30px; border-radius:20px; box-shadow: 0 4px 15px rgba(0,0,0,0.1); background: linear-gradient(145deg, #ffffff, #f8f9fa);">
        <div class="card-header" style="display:flex; align-items:center; gap:10px; margin-bottom:20px;">
            <i class="fas fa-chart-line fa-2x" style="color:#2ecc71;"></i>
            <h3 style="color:#2ecc71; font-size:28px; margin:0; font-weight:600;">Анализ коммерческих объектов</h3>
        </div>
        <div style="height:3px; background:linear-gradient(to right, #2ecc71, #27ae60); width:100%; max-width:500px; margin:0 auto 25px; border-radius:2px;"></div>

        <RadzenStack Orientation="Orientation.Vertical" Gap="20px">
            
            <RadzenStack Orientation="Orientation.Vertical" Gap="10px">
                <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="10px">
                    <i class="fas fa-id-card-alt fa-lg" style="color:#34495e;"></i>
                    <RadzenLabel Text="Введите ID аккаунта:" Style="font-size:18px; font-weight:500; color:#34495e;" />
                </RadzenStack>
                <RadzenNumeric TValue="int" @bind-Value="accountId"
                               Style="width: 200px; border-radius: 8px; border: 1px solid #dee2e6; padding: 8px 12px;"
                               ShowUpDown="false" Min="1" />
            </RadzenStack>

            
            <RadzenButton Text="Анализировать" Click="@AnalyzeSingleAccount"
                          Icon="search"
                          Style="width: fit-content; background: linear-gradient(145deg, #2ecc71, #27ae60);
                               color: white; border: none; border-radius: 10px; padding: 10px 25px;
                               font-weight: 600; font-size: 16px; margin-top: 10px;"
                          HoverStyle="background: #27ae60; transform: translateY(-2px);"
                          Disabled="@(isLoading || accountId <= 0)" />

           
            @if (isLoading)
            {
                <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="10px">
                    <RadzenProgressBar Mode="ProgressBarMode.Indeterminate" Style="width: 200px;" />
                    <RadzenLabel Text="Загрузка данных..." Style="color:#7f8c8d;" />
                </RadzenStack>
            }

          
            @if (result != null)
            {
                <div style="margin-top: 30px;">
                    <div style="height:3px; background:linear-gradient(to right, #2ecc71, #27ae60); width:100%; max-width:500px; margin:0 auto 25px; border-radius:2px;"></div>

                    <RadzenStack Orientation="Orientation.Vertical" Gap="15px">
                        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="10px">
                            <i class="fas fa-info-circle fa-lg" style="color:#34495e;"></i>
                            <RadzenLabel Text="Результат анализа:" Style="font-size:18px; font-weight:500; color:#34495e;" />
                        </RadzenStack>

                        <RadzenStack Orientation="Orientation.Vertical" Gap="10px" Style="margin-left: 30px;">
                            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="10px">
                                <i class="fas fa-user fa-sm" style="color:#2ecc71;"></i>
                                <RadzenLabel Text="Аккаунт ID:" Style="font-weight:500;" />
                                <RadzenLabel Text="@result.AccountId.ToString()" />
                            </RadzenStack>

                            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="10px">
                                <i class="fas fa-chart-pie fa-sm" style="color:#2ecc71;"></i>
                                <RadzenLabel Text="Точность:" Style="font-weight:500;" />
                                <RadzenLabel Text="@(balancedAccuracy != null ? $"{balancedAccuracy*100:F2}%" : "—")" />
                            </RadzenStack>

                            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="10px">
                                <i class="fas fa-building fa-sm" style="color:#2ecc71;"></i>
                                <RadzenLabel Text="Тип:" Style="font-weight:500;" />
                                <RadzenBadge BadgeStyle="@(result.IsCommercial ? BadgeStyle.Danger : BadgeStyle.Success)"
                                             Text="@(result.IsCommercial ? "Коммерческий" : "Жилой")" />
                            </RadzenStack>

                            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="10px">
                                <i class="fas fa-percentage fa-sm" style="color:#2ecc71;"></i>
                                <RadzenLabel Text="Вероятность:" Style="font-weight:500;" />
                                <RadzenLabel Text="@result.DescriptionReason" />
                            </RadzenStack>

                            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="10px">
                                <i class="fas fa-clock fa-sm" style="color:#2ecc71;"></i>
                                <RadzenLabel Text="Дата анализа:" Style="font-weight:500;" />
                                <RadzenLabel Text="@result.PredictedAt.ToString("dd.MM.yyyy HH:mm")" />
                            </RadzenStack>
                        </RadzenStack>
                    </RadzenStack>
                </div>
            }
            else if (wasAnalyzed)
            {
                <RadzenAlert Text="Аккаунт не найден или отсутствуют данные о потреблении."
                             Severity="AlertSeverity.Error"
                             Icon="warning"
                             Style="margin-top: 20px;" />
            }
        </RadzenStack>
    </RadzenCard>
</RadzenStack>

@code {
    private int accountId;
    private AnalysisResult? result;
    private bool isLoading = false;
    private double? balancedAccuracy = null;
    private bool wasAnalyzed = false;
    private DateTime? lastMetricsFetch = null;
    private readonly TimeSpan metricsCacheDuration = TimeSpan.FromMinutes(5);

  

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        StateHasChanged();

        try
        {
            _ = FetchMetricsAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[Фронтенд] Ошибка при инициализации: {ex.Message}");
            await DialogService.Alert($"Ошибка: {ex.Message}", "Ошибка");
        }

        isLoading = false;
        StateHasChanged();
    }

    private async Task FetchMetricsAsync()
    {
        if (lastMetricsFetch.HasValue && DateTime.Now - lastMetricsFetch.Value < metricsCacheDuration)
        {
            Console.WriteLine("[Фронтенд] Метрики из кэша, пропускаем запрос.");
            return;
        }

        try
        {
            Console.WriteLine("[Фронтенд] Запрос метрик из API (/metrics)...");
            var http = HttpClientFactory.CreateClient("BatchPredictClient");
            var metricsResponse = await http.GetAsync("metrics");
            if (metricsResponse.IsSuccessStatusCode)
            {
                var metricsContent = await metricsResponse.Content.ReadAsStringAsync();
                Console.WriteLine($"[Фронтенд] Ответ API (/metrics): {metricsContent[..Math.Min(200, metricsContent.Length)]}...");
                try
                {
                    var metrics = JsonSerializer.Deserialize<Dictionary<string, Dictionary<string, double>>>(metricsContent);
                    if (metrics != null && metrics.TryGetValue("ensemble", out var ensembleMetrics) &&
                        ensembleMetrics.TryGetValue("Balanced Accuracy", out var ba))
                    {
                        balancedAccuracy = ba;
                        lastMetricsFetch = DateTime.Now;
                        Console.WriteLine($"[Фронтенд] Balanced Accuracy (ансамбль): {balancedAccuracy:F2}");
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"[Фронтенд] Ошибка парсинга метрик: {ex.Message}");
                }
            }
            else
            {
                var error = await metricsResponse.Content.ReadAsStringAsync();
                Console.WriteLine($"[Фронтенд] Ошибка API (/metrics): {error}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[Фронтенд] Ошибка запроса метрик: {ex.Message}");
        }

        StateHasChanged();
    }

    private async Task AnalyzeSingleAccount()
    {
        isLoading = true;
        result = null;
        wasAnalyzed = false;
        StateHasChanged();

        try
        {
            Console.WriteLine($"[Фронтенд] Загрузка данных для аккаунта {accountId}...");
            var account = await DbContext.Set<Account>()
                .Include(a => a.Consumptions)
                .Where(a => a.Id == accountId && a.Consumptions != null && a.Consumptions.Any())
                .Select(a => new
                {
                    a.Id,
                    BuildingType = a.BuildingType ?? "Прочий",
                    RoomsCount = a.RoomsCount ?? 1,
                    ResidentsCount = a.ResidentsCount ?? 1,
                    TotalArea = a.TotalArea ?? 100.0m,
                    Consumptions = a.Consumptions
                })
                .FirstOrDefaultAsync();

            if (account == null)
            {
                Console.WriteLine($"[Фронтенд] Аккаунт {accountId} не найден или отсутствуют данные о потреблении.");
                isLoading = false;
                wasAnalyzed = true;
                StateHasChanged();
                return;
            }

            var record = new Dictionary<string, object>
            {
                { "accountId", account.Id },
                { "buildingType", account.BuildingType },
                { "roomsCount", account.RoomsCount },
                { "residentsCount", account.ResidentsCount },
                { "totalArea", (double)account.TotalArea },
                {
                    "consumption",
                    account.Consumptions.ToDictionary(
                        c => c.Month.ToString(),
                        c => (double)c.Value
                    )
                }
            };

            var records = new List<Dictionary<string, object>> { record };
            Console.WriteLine("[Фронтенд] Пример записи: " + JsonSerializer.Serialize(record));

            var http = HttpClientFactory.CreateClient("BatchPredictClient");
            var requestData = new { records };
            var json = JsonSerializer.Serialize(requestData);
            using var content = new StringContent(json, Encoding.UTF8, "application/json");

            Console.WriteLine($"[Фронтенд] Отправка данных для аккаунта {accountId} в API (/batch-predict)...");
            var response = await http.PostAsync("batch-predict", content);

            if (!response.IsSuccessStatusCode)
            {
                var error = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"[Фронтенд] Ошибка API (/batch-predict): {error}");
                await DialogService.Alert($"Ошибка API: {response.StatusCode}", "Ошибка");
                isLoading = false;
                StateHasChanged();
                return;
            }

            var responseContent = await response.Content.ReadAsStringAsync();
            Console.WriteLine($"[Фронтенд] Ответ API (/batch-predict): {responseContent[..Math.Min(200, responseContent.Length)]}...");

            List<Dictionary<string, JsonElement>> predictionResults;
            try
            {
                predictionResults = JsonSerializer.Deserialize<List<Dictionary<string, JsonElement>>>(responseContent) ?? new();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"[Фронтенд] Ошибка парсинга ответа (/batch-predict): {ex.Message}");
                await DialogService.Alert($"Ошибка парсинга ответа API", "Ошибка");
                isLoading = false;
                StateHasChanged();
                return;
            }

            if (!predictionResults.Any())
            {
                Console.WriteLine($"[Фронтенд] Пустой ответ от API для аккаунта {accountId}.");
                await DialogService.Alert("Ошибка: пустой ответ от API", "Ошибка");
                isLoading = false;
                StateHasChanged();
                return;
            }

            var prediction = predictionResults.FirstOrDefault(pr => pr.TryGetValue("account_id", out var idProp) && idProp.GetInt32() == accountId);
            if (prediction == null)
            {
                Console.WriteLine($"[Фронтенд] Результат для аккаунта {accountId} не найден в ответе API.");
                await DialogService.Alert($"Результат для аккаунта {accountId} не найден", "Ошибка");
                isLoading = false;
                StateHasChanged();
                return;
            }

            var nnResult = new NnResult
                {
                    AccountId = accountId,
                    DescriptionReason = prediction.TryGetValue("description_reason", out var descProp) ? descProp.GetString() ?? "Нет данных" : "Нет данных",
                    IsViolator = prediction.TryGetValue("is_violator", out var violatorProp) && violatorProp.GetBoolean(),
                    PredictedAt = DateTime.Now
                };

            if (prediction.TryGetValue("predicted_at", out var predictedAtProp))
            {
                string predictedAtStr = predictedAtProp.GetString();
                if (!string.IsNullOrEmpty(predictedAtStr) && DateTimeOffset.TryParse(predictedAtStr, out var dateTimeOffset))
                {
                    nnResult.PredictedAt = dateTimeOffset.UtcDateTime.AddHours(+3);
                }
                else
                {
                    Console.WriteLine($"[Фронтенд] Ошибка парсинга predicted_at для account_id {accountId}: {predictedAtStr}");
                }
            }

            Console.WriteLine($"[Фронтенд] Результат: AccountId={nnResult.AccountId}, Description={nnResult.DescriptionReason}, IsCommercial={nnResult.IsViolator}, PredictedAt={nnResult.PredictedAt}");

            using var transaction = await DbContext.Database.BeginTransactionAsync();
            try
            {
                var existingResult = await DbContext.NNResults
                    .FirstOrDefaultAsync(n => n.AccountId == accountId);

                if (existingResult != null)
                {
                    existingResult.DescriptionReason = nnResult.DescriptionReason;
                    existingResult.IsViolator = nnResult.IsViolator;
                    existingResult.PredictedAt = nnResult.PredictedAt;
                }
                else
                {
                    DbContext.NNResults.Add(nnResult);
                }

                await DbContext.SaveChangesAsync();
                await transaction.CommitAsync();
                Console.WriteLine($"[Фронтенд] Сохранен результат для аккаунта {accountId} в таблицу nn_results.");

                result = new AnalysisResult
                    {
                        AccountId = nnResult.AccountId,
                        DescriptionReason = nnResult.DescriptionReason,
                        IsCommercial = nnResult.IsViolator,
                        PredictedAt = nnResult.PredictedAt
                    };
            }
            catch (Exception ex)
            {
                await transaction.RollbackAsync();
                Console.WriteLine($"[Фронтенд] Ошибка сохранения в базу: {ex.Message}");
                await DialogService.Alert($"Ошибка сохранения данных: {ex.Message}", "Ошибка");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[Фронтенд] Ошибка: {ex.Message}");
            await DialogService.Alert($"Ошибка: {ex.Message}", "Ошибка");
        }

        isLoading = false;
        wasAnalyzed = true;
        StateHasChanged();
    }
}

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css" integrity="sha512-DTOQO9RWCH3ppGqcWaEA1BIZOC6xxalwEsw9c2QQeAIftl+Vegovlnee1c9QX4TctnWMn13TZye+giMm8e2LwA==" crossorigin="anonymous" referrerpolicy="no-referrer" />

<style>
    .rz-button {
        transition: all 0.3s ease;
    }

        .rz-button:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        }

    .rz-numeric {
        font-family: Arial, sans-serif;
    }

    .rz-label {
        font-family: Arial, sans-serif;
        color: #2c3e50;
    }

    @@media (max-width: 768px) {
        .rz-card {
            padding: 20px !important;
        }

        .rz-stack-vertical {
            padding: 0 10px;
        }
    }
</style>