@page "/"
@using ClearKilovat.Interfaces
@using ClearKilovat.Models.Entity
@using Radzen.Blazor
@using QuestPDF.Fluent
@using QuestPDF.Helpers
@using QuestPDF.Infrastructure
@rendermode InteractiveServer
@inject IDbService dbService
@inject IJSRuntime JSRuntime

<PageTitle>Список потребителей</PageTitle>
<RadzenDataGrid Data="@_clients" AllowColumnReorder="true" AllowColumnResize="true" TItem="Account" AllowSorting="true" AllowFiltering="true" AllowPaging="true" PageSize="11" Style="border-radius: 20px; box-shadow: 0 4px 15px rgba(0,0,0,0.1); background: linear-gradient(145deg, #ffffff, #f8f9fa);">
    <Columns>
        <RadzenDataGridColumn TItem="Account" Property="Id" Title="ID" Width="40px">
            <HeaderTemplate>
                <i class="fas fa-id-card fa-sm" style="color:#34495e; margin-right: 5px;"></i>ID
            </HeaderTemplate>
            <Template Context="data">
                <RadzenLink Path="@($"/client-card/{data.Id}")">
                    <RadzenText TextStyle="Radzen.Blazor.TextStyle.Body1" class="text-primary">
                        @data.Id
                    </RadzenText>
                </RadzenLink>
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="Account" Property="Address" Title="Адрес" Width="100px">
            <HeaderTemplate>
                <i class="fas fa-home fa-sm" style="color:#34495e; margin-right: 5px;"></i>Адрес
            </HeaderTemplate>
            <Template Context="data">
                <RadzenText TextStyle="Radzen.Blazor.TextStyle.Body1" Style="color:#2c3e50;">
                    @data.Address
                </RadzenText>
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="Account" Property="BuildingType" Title="Тип здания" Width="70px">
            <HeaderTemplate>
                <i class="fas fa-city fa-sm" style="color:#34495e; margin-right: 5px;"></i>Тип здания
            </HeaderTemplate>
            <Template Context="data">
                <RadzenText TextStyle="Radzen.Blazor.TextStyle.Body1" Style="color:#2c3e50;">
                    @data.BuildingType
                </RadzenText>
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="Account"
        Property="@nameof(Account.ParserAnalytics.IsViolator)"
        Title="Оценка парсера" Width="80px">
            <HeaderTemplate>
                <i class="fas fa-line-chart fa-sm" style="color:#34495e; margin-right: 5px;"></i>
                Оценка парсера
            </HeaderTemplate>
            <Template Context="data">
                <span class="@(data?.ParserAnalytics?.IsViolator == true ? "prob-low" : data?.ParserAnalytics?.IsViolator == false ? "prob-high" : "")">
                    @(data?.ParserAnalytics?.IsViolator == true
                                    ? "Коммерческое" : data?.ParserAnalytics?.IsViolator == false ? "Некоммерческое"
                                    : null)
                </span>
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="Account" Property="@nameof(Account.ParserAnalytics.DescriptionReason)" Title="Выводы парсера" Width="80px">
            <HeaderTemplate>
                <i class="fas fa-area-chart fa-sm" style="color:#34495e; margin-right: 5px;"></i>Выводы парсера
            </HeaderTemplate>
            <Template Context="data">
                <RadzenText TextStyle="Radzen.Blazor.TextStyle.Body1" Style="color:#2c3e50;">
                    @data.ParserAnalytics?.DescriptionReason
                </RadzenText>
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="Account"
        Property="@nameof(Account.NnResult.IsViolator)"
        Title="Результат ИИ" Width="60px">
            <HeaderTemplate>
                <i class="fas fa-line-chart fa-sm" style="color:#34495e; margin-right: 5px;"></i>
                Результат ML
            </HeaderTemplate>
            <Template Context="data">
                @{
                    var prob = ParseProbability(data.NnResult?.DescriptionReason);
                    var cls = GetCssClass(prob);
                    var lbl = GetLabel(prob);
                }
                <span class="@cls">@lbl</span>
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="Account" Property="@nameof(Account.NnResult.DescriptionReason)" Title="Выводы ML" Width="150px">
            <HeaderTemplate>
                <i class="fas fa-area-chart fa-sm" style="color:#34495e; margin-right: 5px;"></i>Выводы ML
            </HeaderTemplate>
            <Template Context="data">
                <RadzenText TextStyle="Radzen.Blazor.TextStyle.Body1" Style="color:#2c3e50;">
                    @data.NnResult?.DescriptionReason
                </RadzenText>
            </Template>
        </RadzenDataGridColumn>
    </Columns>
    <EmptyTemplate>
        <RadzenText TextStyle="Radzen.Blazor.TextStyle.Body1" Style="color:#34495e; padding: 20px; text-align: center;">
            Нет данных для отображения
        </RadzenText>
    </EmptyTemplate>
</RadzenDataGrid>
<RadzenStack class="mt-3" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.End">
    <RadzenButton Click="@GeneratePdf" ButtonStyle="ButtonStyle.Primary">
        <i class="fas fa-download fa-2x" style="color:white;"></i>
    </RadzenButton>
</RadzenStack>

@code
{
    private List<Account> _clients = new();
    private List<Company> _companies = new();

    protected override Task OnInitializedAsync()
    {
        _companies = dbService.GetCompanies();
        var clients = dbService.GetAccounts();
        _clients = clients
            .Where(x => x.ParserAnalytics?.IsViolator == true || x.NnResult?.IsViolator == true)
            .ToList();
        return base.OnInitializedAsync();
    }

    private static double? ParseProbability(string? text)
    {
        if (string.IsNullOrWhiteSpace(text))
            return null;

        var m = System.Text.RegularExpressions.Regex.Match(text, @"([\d\.,]+)\s*%");
        if (!m.Success) return null;

        var num = m.Groups[1].Value.Replace(',', '.');

        return double.TryParse(num,
                               System.Globalization.NumberStyles.Any,
                               System.Globalization.CultureInfo.InvariantCulture,
                               out var p)
               ? p
               : null;
    }

    private static string GetCssClass(double? p) =>
        p is null ? "prob-unknown"
        : p > 60 ? "prob-low"
        : p > 50 ? "prob-medium"
        : "prob-high";

    private static string GetLabel(double? p) =>
        p is null ? "Н/д"
        : p > 60 ? "Коммерческое"
        : p > 50 ? "Подозрение"
        : "Некоммерческое";

    private async Task GeneratePdf()
    {
        QuestPDF.Settings.License = LicenseType.Community;

        var document = Document.Create(container =>
        {
            container.Page(page =>
            {
                page.Size(PageSizes.A4);
                page.Margin(2, Unit.Centimetre);
                page.DefaultTextStyle(x => x.FontSize(12).FontFamily(Fonts.Calibri));
                page.Background().Background(QuestPDF.Helpers.Colors.Grey.Lighten4);

                page.Header()
                    .PaddingBottom(10)
                    .BorderBottom(1, Unit.Point)
                    .Text("Отчет по потребителям")
                    .SemiBold()
                    .FontSize(24)
                    .FontColor(QuestPDF.Helpers.Colors.Green.Darken2)
                    .AlignCenter();

                page.Content()
                    .PaddingVertical(1, Unit.Centimetre)
                    .Column(column =>
                    {
                        foreach (var account in _clients)
                        {
                            column.Item().Table(table =>
                            {
                                table.ColumnsDefinition(columns =>
                                {
                                    columns.ConstantColumn(180);
                                    columns.RelativeColumn();
                                });

                                table.Header(header =>
                                {
                                    header.Cell().Background(QuestPDF.Helpers.Colors.Green.Lighten2).Padding(5).Text($"Абонент ID: {account.Id}").Bold().FontColor(QuestPDF.Helpers.Colors.White);
                                    header.Cell().Background(QuestPDF.Helpers.Colors.Green.Lighten2).Padding(5).Text("Значение").Bold().FontColor(QuestPDF.Helpers.Colors.White);
                                });

                                int rowIndex = 0;

                                void AddRow(string label, string value, string icon = "•")
                                {
                                    var backgroundColor = rowIndex % 2 == 0 ? QuestPDF.Helpers.Colors.White : QuestPDF.Helpers.Colors.Grey.Lighten5;

                                    table.Cell()
                                        .Border(0.5f)
                                        .Background(backgroundColor)
                                        .Padding(8)
                                        .Row(row =>
                                        {
                                            row.ConstantItem(20).Text(icon).FontSize(10).FontColor(QuestPDF.Helpers.Colors.Green.Medium);
                                            row.AutoItem().Text(label).Bold();
                                        });

                                    table.Cell()
                                        .Border(0.5f)
                                        .Background(backgroundColor)
                                        .Padding(8)
                                        .Text(value);

                                    rowIndex++;
                                }

                                AddRow("Account ID:", account.Id.ToString(), "🆔");
                                AddRow("Адрес:", account.Address, "🏠");
                                AddRow("Номер телефона:", _companies.FirstOrDefault(x=>x.AccountId == account.Id)?.PhoneNumber ?? "—", "📞");
                                AddRow("Тип здания:", account.BuildingType ?? "—", "🏢");
                                AddRow("Оценка парсера:", account.ParserAnalytics?.IsViolator == true ? "Коммерческое" : account.ParserAnalytics?.IsViolator == false ? "Некоммерческое" : "—", "📈");
                                AddRow("Выводы парсера:", account.ParserAnalytics?.DescriptionReason ?? "—", "📝");
                                AddRow("Результат ML:", GetLabel(ParseProbability(account.NnResult?.DescriptionReason)), "🧠");
                                AddRow("Выводы ML:", account.NnResult?.DescriptionReason ?? "—", "📊");
                            });

                            column.Item().Height(20); 
                        }
                    });

                page.Footer()
                    .AlignCenter()
                    .Text(x =>
                    {
                        x.Span("Страница ").FontSize(10).FontColor(QuestPDF.Helpers.Colors.Grey.Medium);
                        x.CurrentPageNumber().FontSize(10).FontColor(QuestPDF.Helpers.Colors.Grey.Medium).Bold();
                        x.Span(" из ").FontSize(10).FontColor(QuestPDF.Helpers.Colors.Grey.Medium);
                        x.TotalPages().FontSize(10).FontColor(QuestPDF.Helpers.Colors.Grey.Medium).Bold();
                    });
            });
        });

        using var stream = new MemoryStream();
        document.GeneratePdf(stream);

        var fileName = "ОтчетПоПотребителям.pdf";
        var fileContent = stream.ToArray();
        await JSRuntime.InvokeVoidAsync("downloadFile", fileName, "application/pdf", Convert.ToBase64String(fileContent));
    }
}

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css" integrity="sha512-DTOQO9RWCH3ppGqcWaEA1BIZOC6xxalwEsw9c2QQeAIftl+Vegovlnee1c9QX4TctnWMn13TZye+giMm8e2LwA==" crossorigin="anonymous" referrerpolicy="no-referrer" />
<script src="/_content/pdf.js"></script>